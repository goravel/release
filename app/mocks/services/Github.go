// Code generated by mockery. DO NOT EDIT.

package services

import (
	github "github.com/google/go-github/v73/github"
	mock "github.com/stretchr/testify/mock"
)

// Github is an autogenerated mock type for the Github type
type Github struct {
	mock.Mock
}

type Github_Expecter struct {
	mock *mock.Mock
}

func (_m *Github) EXPECT() *Github_Expecter {
	return &Github_Expecter{mock: &_m.Mock}
}

// CheckBranchExists provides a mock function with given fields: owner, repo, branch
func (_m *Github) CheckBranchExists(owner string, repo string, branch string) (bool, error) {
	ret := _m.Called(owner, repo, branch)

	if len(ret) == 0 {
		panic("no return value specified for CheckBranchExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return rf(owner, repo, branch)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(owner, repo, branch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, repo, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_CheckBranchExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBranchExists'
type Github_CheckBranchExists_Call struct {
	*mock.Call
}

// CheckBranchExists is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - branch string
func (_e *Github_Expecter) CheckBranchExists(owner interface{}, repo interface{}, branch interface{}) *Github_CheckBranchExists_Call {
	return &Github_CheckBranchExists_Call{Call: _e.mock.On("CheckBranchExists", owner, repo, branch)}
}

func (_c *Github_CheckBranchExists_Call) Run(run func(owner string, repo string, branch string)) *Github_CheckBranchExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Github_CheckBranchExists_Call) Return(_a0 bool, _a1 error) *Github_CheckBranchExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_CheckBranchExists_Call) RunAndReturn(run func(string, string, string) (bool, error)) *Github_CheckBranchExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequest provides a mock function with given fields: owner, repo, pr
func (_m *Github) CreatePullRequest(owner string, repo string, pr *github.NewPullRequest) (*github.PullRequest, error) {
	ret := _m.Called(owner, repo, pr)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *github.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *github.NewPullRequest) (*github.PullRequest, error)); ok {
		return rf(owner, repo, pr)
	}
	if rf, ok := ret.Get(0).(func(string, string, *github.NewPullRequest) *github.PullRequest); ok {
		r0 = rf(owner, repo, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *github.NewPullRequest) error); ok {
		r1 = rf(owner, repo, pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type Github_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - pr *github.NewPullRequest
func (_e *Github_Expecter) CreatePullRequest(owner interface{}, repo interface{}, pr interface{}) *Github_CreatePullRequest_Call {
	return &Github_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", owner, repo, pr)}
}

func (_c *Github_CreatePullRequest_Call) Run(run func(owner string, repo string, pr *github.NewPullRequest)) *Github_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*github.NewPullRequest))
	})
	return _c
}

func (_c *Github_CreatePullRequest_Call) Return(_a0 *github.PullRequest, _a1 error) *Github_CreatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_CreatePullRequest_Call) RunAndReturn(run func(string, string, *github.NewPullRequest) (*github.PullRequest, error)) *Github_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRelease provides a mock function with given fields: owner, repo, release
func (_m *Github) CreateRelease(owner string, repo string, release *github.RepositoryRelease) (*github.RepositoryRelease, error) {
	ret := _m.Called(owner, repo, release)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelease")
	}

	var r0 *github.RepositoryRelease
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *github.RepositoryRelease) (*github.RepositoryRelease, error)); ok {
		return rf(owner, repo, release)
	}
	if rf, ok := ret.Get(0).(func(string, string, *github.RepositoryRelease) *github.RepositoryRelease); ok {
		r0 = rf(owner, repo, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *github.RepositoryRelease) error); ok {
		r1 = rf(owner, repo, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_CreateRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRelease'
type Github_CreateRelease_Call struct {
	*mock.Call
}

// CreateRelease is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - release *github.RepositoryRelease
func (_e *Github_Expecter) CreateRelease(owner interface{}, repo interface{}, release interface{}) *Github_CreateRelease_Call {
	return &Github_CreateRelease_Call{Call: _e.mock.On("CreateRelease", owner, repo, release)}
}

func (_c *Github_CreateRelease_Call) Run(run func(owner string, repo string, release *github.RepositoryRelease)) *Github_CreateRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*github.RepositoryRelease))
	})
	return _c
}

func (_c *Github_CreateRelease_Call) Return(_a0 *github.RepositoryRelease, _a1 error) *Github_CreateRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_CreateRelease_Call) RunAndReturn(run func(string, string, *github.RepositoryRelease) (*github.RepositoryRelease, error)) *Github_CreateRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateReleaseNotes provides a mock function with given fields: owner, repo, opts
func (_m *Github) GenerateReleaseNotes(owner string, repo string, opts *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, error) {
	ret := _m.Called(owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReleaseNotes")
	}

	var r0 *github.RepositoryReleaseNotes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, error)); ok {
		return rf(owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, *github.GenerateNotesOptions) *github.RepositoryReleaseNotes); ok {
		r0 = rf(owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryReleaseNotes)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *github.GenerateNotesOptions) error); ok {
		r1 = rf(owner, repo, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_GenerateReleaseNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateReleaseNotes'
type Github_GenerateReleaseNotes_Call struct {
	*mock.Call
}

// GenerateReleaseNotes is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - opts *github.GenerateNotesOptions
func (_e *Github_Expecter) GenerateReleaseNotes(owner interface{}, repo interface{}, opts interface{}) *Github_GenerateReleaseNotes_Call {
	return &Github_GenerateReleaseNotes_Call{Call: _e.mock.On("GenerateReleaseNotes", owner, repo, opts)}
}

func (_c *Github_GenerateReleaseNotes_Call) Run(run func(owner string, repo string, opts *github.GenerateNotesOptions)) *Github_GenerateReleaseNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*github.GenerateNotesOptions))
	})
	return _c
}

func (_c *Github_GenerateReleaseNotes_Call) Return(_a0 *github.RepositoryReleaseNotes, _a1 error) *Github_GenerateReleaseNotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_GenerateReleaseNotes_Call) RunAndReturn(run func(string, string, *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, error)) *Github_GenerateReleaseNotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRelease provides a mock function with given fields: owner, repo, tag
func (_m *Github) GetLatestRelease(owner string, repo string, tag string) (*github.RepositoryRelease, error) {
	ret := _m.Called(owner, repo, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRelease")
	}

	var r0 *github.RepositoryRelease
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*github.RepositoryRelease, error)); ok {
		return rf(owner, repo, tag)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *github.RepositoryRelease); ok {
		r0 = rf(owner, repo, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, repo, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_GetLatestRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRelease'
type Github_GetLatestRelease_Call struct {
	*mock.Call
}

// GetLatestRelease is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - tag string
func (_e *Github_Expecter) GetLatestRelease(owner interface{}, repo interface{}, tag interface{}) *Github_GetLatestRelease_Call {
	return &Github_GetLatestRelease_Call{Call: _e.mock.On("GetLatestRelease", owner, repo, tag)}
}

func (_c *Github_GetLatestRelease_Call) Run(run func(owner string, repo string, tag string)) *Github_GetLatestRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Github_GetLatestRelease_Call) Return(_a0 *github.RepositoryRelease, _a1 error) *Github_GetLatestRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_GetLatestRelease_Call) RunAndReturn(run func(string, string, string) (*github.RepositoryRelease, error)) *Github_GetLatestRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequest provides a mock function with given fields: owner, repo, number
func (_m *Github) GetPullRequest(owner string, repo string, number int) (*github.PullRequest, error) {
	ret := _m.Called(owner, repo, number)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequest")
	}

	var r0 *github.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (*github.PullRequest, error)); ok {
		return rf(owner, repo, number)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) *github.PullRequest); ok {
		r0 = rf(owner, repo, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(owner, repo, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_GetPullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequest'
type Github_GetPullRequest_Call struct {
	*mock.Call
}

// GetPullRequest is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - number int
func (_e *Github_Expecter) GetPullRequest(owner interface{}, repo interface{}, number interface{}) *Github_GetPullRequest_Call {
	return &Github_GetPullRequest_Call{Call: _e.mock.On("GetPullRequest", owner, repo, number)}
}

func (_c *Github_GetPullRequest_Call) Run(run func(owner string, repo string, number int)) *Github_GetPullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Github_GetPullRequest_Call) Return(_a0 *github.PullRequest, _a1 error) *Github_GetPullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_GetPullRequest_Call) RunAndReturn(run func(string, string, int) (*github.PullRequest, error)) *Github_GetPullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequests provides a mock function with given fields: owner, repo, opts
func (_m *Github) GetPullRequests(owner string, repo string, opts *github.PullRequestListOptions) ([]*github.PullRequest, error) {
	ret := _m.Called(owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequests")
	}

	var r0 []*github.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *github.PullRequestListOptions) ([]*github.PullRequest, error)); ok {
		return rf(owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, *github.PullRequestListOptions) []*github.PullRequest); ok {
		r0 = rf(owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *github.PullRequestListOptions) error); ok {
		r1 = rf(owner, repo, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_GetPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequests'
type Github_GetPullRequests_Call struct {
	*mock.Call
}

// GetPullRequests is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - opts *github.PullRequestListOptions
func (_e *Github_Expecter) GetPullRequests(owner interface{}, repo interface{}, opts interface{}) *Github_GetPullRequests_Call {
	return &Github_GetPullRequests_Call{Call: _e.mock.On("GetPullRequests", owner, repo, opts)}
}

func (_c *Github_GetPullRequests_Call) Run(run func(owner string, repo string, opts *github.PullRequestListOptions)) *Github_GetPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*github.PullRequestListOptions))
	})
	return _c
}

func (_c *Github_GetPullRequests_Call) Return(_a0 []*github.PullRequest, _a1 error) *Github_GetPullRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_GetPullRequests_Call) RunAndReturn(run func(string, string, *github.PullRequestListOptions) ([]*github.PullRequest, error)) *Github_GetPullRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleases provides a mock function with given fields: owner, repo, opts
func (_m *Github) GetReleases(owner string, repo string, opts *github.ListOptions) ([]*github.RepositoryRelease, error) {
	ret := _m.Called(owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetReleases")
	}

	var r0 []*github.RepositoryRelease
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *github.ListOptions) ([]*github.RepositoryRelease, error)); ok {
		return rf(owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *github.ListOptions) error); ok {
		r1 = rf(owner, repo, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Github_GetReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleases'
type Github_GetReleases_Call struct {
	*mock.Call
}

// GetReleases is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - opts *github.ListOptions
func (_e *Github_Expecter) GetReleases(owner interface{}, repo interface{}, opts interface{}) *Github_GetReleases_Call {
	return &Github_GetReleases_Call{Call: _e.mock.On("GetReleases", owner, repo, opts)}
}

func (_c *Github_GetReleases_Call) Run(run func(owner string, repo string, opts *github.ListOptions)) *Github_GetReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*github.ListOptions))
	})
	return _c
}

func (_c *Github_GetReleases_Call) Return(_a0 []*github.RepositoryRelease, _a1 error) *Github_GetReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Github_GetReleases_Call) RunAndReturn(run func(string, string, *github.ListOptions) ([]*github.RepositoryRelease, error)) *Github_GetReleases_Call {
	_c.Call.Return(run)
	return _c
}

// NewGithub creates a new instance of Github. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGithub(t interface {
	mock.TestingT
	Cleanup(func())
}) *Github {
	mock := &Github{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
