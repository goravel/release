// Code generated by mockery. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

type Process_Expecter struct {
	mock *mock.Mock
}

func (_m *Process) EXPECT() *Process_Expecter {
	return &Process_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: command
func (_m *Process) Run(command string) (string, error) {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(command)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Process_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Process_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - command string
func (_e *Process_Expecter) Run(command interface{}) *Process_Run_Call {
	return &Process_Run_Call{Call: _e.mock.On("Run", command)}
}

func (_c *Process_Run_Call) Run(run func(command string)) *Process_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Process_Run_Call) Return(_a0 string, _a1 error) *Process_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Process_Run_Call) RunAndReturn(run func(string) (string, error)) *Process_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcess creates a new instance of Process. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Process {
	mock := &Process{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
